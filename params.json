{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Echoes","tagline":"Need something for logging in JavaScript? Want to powerful and simple solution? Echo.js is your choose, bro!","google":"UA-17373037-3","body":"# Echoes.js — comfort and elegance (while digging in logs)\r\n\r\nNeed something for logging in JavaScript? Want to powerful and simple solution?\r\n\r\nWant to know what happened in module X between 9:00 and 10:00? You wish to see all logs of exact object for last 15 minutes?\r\n\r\nEchoes.js is your choose, bro!\r\n\r\n## Usage\r\n\r\n### Basic usage\r\n\r\n``` coffeescript\r\necho       'You'      # => Level of importance is 0\r\necho.debug 'are'      # => … is 0\r\necho.info  'awesome,' # => … is 1\r\necho.warn  'my'       # => … is 2\r\necho.error 'friend!'  # => … is 3\r\n```\r\n\r\n``` coffeescript\r\necho('Good news!', level: 3)       # => … is 3\r\necho('Good news!', level: 'error') # => … is 3\r\n```\r\n\r\n### Structure of logs:\r\n\r\nThis code:\r\n\r\n``` coffeescript\r\necho.log('Test', 'logging', namespace: 'app.lol_module.45')\r\necho.log(['trololo'])\r\n```\r\n\r\n… will store:\r\n\r\n``` json\r\n[\r\n  {\r\n    \"timestamp\":  1341468018606,\r\n    \"body\":       [\"Test\", \"logging\"],\r\n    \"namespace\":  \"app.lol_module.45\"\r\n  },\r\n  {\r\n    \"timestamp\":  1341468018606,\r\n    \"body\":       [[\"trololo\"]],\r\n    \"namespace\":  \"\"\r\n  }\r\n]\r\n```\r\n\r\n### Print\r\n\r\nBy default logs is don't print to developer console (Web Inspector, Firebug etc).\r\n\r\nIf you want to log with print you should add `print: true` key:\r\n\r\n``` coffeescript\r\necho('', print: true)\r\n```\r\n\r\nIf you want to setup `print: true` for specific levels:\r\n\r\n``` coffeescript\r\necho.definePrint\r\n  0:     false\r\n  3:     true\r\n  error: true\r\n```\r\n\r\nOr you can you advanced rules:\r\n\r\n```\r\nall                                       - Set true to all levels.\r\nonly                                      - Set true to only …\r\nexcept                                    - Set true to all except …\r\ngreaterThan (alias: gt)                   - Greater than.\r\ngreaterThanOrEqualTo (aliases: gte, gteq) - Greater than or equal to.\r\nlessThan (alias: lt)                      - Less than.\r\nlessThanOrEqualTo (aliases: lte, lteq)    - Less than or equal to.\r\n```\r\n\r\n#### Examples\r\n\r\nAlways print:\r\n\r\n``` coffeescript\r\necho.definePrint('all')\r\n\r\n# equal to\r\n\r\necho.definePrint(all: true)\r\n\r\n# equal to\r\n\r\necho.defaultOptions.print = true\r\n```\r\n\r\nOnly for specific levels:\r\n\r\n``` coffeescript\r\necho.definePrint('only', [1, 'warn'])\r\n```\r\n\r\nPrint log with level great than 4 (but 7 and 9):\r\n\r\n``` coffeescript\r\necho.definePrint\r\n  gt:     4\r\n  except: [7, 9]\r\n\r\n# equal to\r\n\r\necho.definePrint\r\n  gt: 4\r\n  7:  false\r\n  9:  false\r\n\r\n# equal to\r\n\r\necho.definePrint\r\n  gt:     4\r\n  except: 7\r\n  9:      false\r\n```\r\n\r\netc\r\n\r\n#### Print function\r\n\r\nBy default Echoes use `console.log` (if defined) for logs with level `0`, `console.info` for `1`, `console.warn` for `2`, `console.error` for `3`.\r\n\r\nBut you can setup you own print function:\r\n\r\n``` coffeescript\r\nownPrint = (log, options) ->\r\n  alert(log.body)\r\n\r\necho.setPrintFunction(ownPrint)\r\n```\r\n\r\n### Log objects (with clone)\r\n\r\nAll objects and arrays clone on log:\r\n\r\n``` coffeescript\r\nobj =\r\n  qwe: 1\r\n  asd: 2\r\n  obj: qwe: 1, asd: 2\r\n\r\necho obj\r\n\r\nloggedObj = echo.logs.first().body[0]\r\n\r\nloggedObj == obj     #=> false, because obj was cloned\r\nloggedObj.obj == obj #=> true, but not deeply\r\n```\r\n\r\n### Save link to objects instead of clone\r\n\r\nIf you want to save link to object instead of clone it, just add `clone: false` key to options:\r\n\r\n``` coffeescript\r\nobj = qwe: 1, asd: 2\r\n\r\necho obj, clone: false\r\n\r\necho.logs.first().body[0] == obj #=> true\r\n```\r\n\r\n### Write plugins for log process\r\n\r\n```\r\nTODO: Add examples\r\n```\r\n\r\n### Indeficate object\r\n\r\nThere 3 ways to indeficate object:\r\n\r\n* namespacePrefix\r\n* namespace\r\n* id\r\n\r\nOn log namespacePrefix, namespace and id join with `.` and save as `cid`:\r\n\r\n``` coffeescript\r\necho 'Qwerty', namespacePrefix: 'app', namespace: 'controller', id: 42\r\necho.logs.first().cid # => \"app.controller.42\"\r\n```\r\n\r\n### Basic functions to get logs\r\n\r\nGet first record:\r\n\r\n``` coffeescript\r\necho.logs.first()\r\n```\r\n\r\nTo get all logs (array of log objects):\r\n\r\n``` coffeescript\r\necho.logs.all()\r\n```\r\n\r\n### Access logs by shortcut\r\n\r\n``` coffeescript\r\nl = echo.logs\r\nl.all()\r\nl.first()\r\n```\r\n\r\n### Getters instead functions (works only in [...])\r\n\r\n```\r\nTODO: Add more examples\r\n```\r\n\r\n### Grep logs\r\n\r\nTo find logs with `'some'` in body:\r\n\r\n```\r\necho.logs.grep 'some' # => [{ body: ['Something'] }, { body: ['I want some LSD.']}]\r\n```\r\n\r\n### Get logs by time\r\n\r\n```\r\nTODO: Add more examples\r\n```\r\n\r\n### Write plugins for logs\r\n\r\n```\r\nTODO: Add more examples\r\n```\r\n\r\n### Define custom levels\r\n\r\n``` coffeescript\r\necho.shitHappened # => undefined\r\necho.define(shitHappened: 8)\r\necho.shitHappened # Log function with level of importance equal to 8\r\n```\r\n\r\n### Callbacks\r\n\r\n```\r\nTODO: Add examples\r\n```\r\n\r\n### Async\r\n\r\n```\r\nTODO: Add examples\r\n```\r\n\r\n### Add trace to log (limited support)\r\n\r\n```\r\nTODO: Add examples\r\n```\r\n\r\n### Output to browser console\r\n\r\n```\r\nTODO: Add examples\r\n```\r\n\r\n### Currying\r\n\r\nYou can create curried function with predefined options, like `level`, `namespacePrefix` etc\r\n\r\n### Dump log\r\n\r\nYou can dump logs:\r\n\r\n```\r\n$.post \\\r\n  '/logs',\r\n  log: echo.dump()\r\n```\r\n\r\nIf you're using an older browser which doesn't have native JSON support (i.e. IE 7), you'll need to include [`json2.js`](https://github.com/douglascrockford/JSON-js/blob/master/json2.js) which adds legacy support.\r\n\r\n### Dump level\r\n\r\nBy default dump level is `1`:\r\n\r\n```\r\necho.dump(0)\r\n# => [ { body: [1, 2, \"[object Object]\"], …\r\n\r\necho.dump()\r\n# => [ { body: [1, 2, { 1, 2, \"[object Object]\" }], …\r\n\r\necho.dump(2)\r\n# => [ { body: [1, 2, { 1, 2, { 1, 2, \"[object Object]\" } }], …\r\n\r\n# etc\r\n```\r\n\r\nIf you want to get deep dump to serialise objects with circular references you should include [`cycle.js extension to the JSON object`](https://github.com/douglascrockford/JSON-js/blob/master/cycle.js) and pass `-1` as level (be carefully, making dump may take a time).\r\n\r\n``` coffeescript\r\necho.dump(-1)\r\n```\r\n\r\n### Restore dump\r\n\r\nAnd restore dump with initializer:\r\n\r\n``` coffeescript\r\ne = Echo(dump)\r\n```\r\n\r\n… or via call restore:\r\n\r\n``` coffeescript\r\necho.restore(dump)\r\n```\r\n\r\n### Store log dumps in local storage\r\n\r\n```\r\nTODO: Add examples\r\n```\r\n\r\n### Cleanup logs\r\n\r\n```\r\nTODO: Add examples\r\n```\r\n\r\n## Changelog\r\n\r\nThis project uses [Semantic Versioning](http://semver.org/) for release numbering.\r\n\r\nCurrently this project in active development but no any releases yet.\r\n\r\n## Contributors and sponsorship\r\n\r\nIdea and code by @kossnocorp and other [contributors](https://github.com/kossnocorp/echo/contributors).\r\n\r\nInitialy sponsored by [Evil Martians](http://evilmartians.com/) special for [Wannafun](http://wannafun.ru/).\r\n\r\n## License\r\n\r\nThe MIT License\r\n\r\nCopyright (c) 2012 Sasha Koss\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."}